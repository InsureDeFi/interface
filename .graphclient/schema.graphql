schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Asset {
  id: ID!
  assetId: BigInt!
  symbol: String!
  volume: BigDecimal!
  txCount: BigInt!
  addedAtTimestamp: BigInt!
  addedAtBlockNumber: BigInt!
  policies(skip: Int = 0, first: Int = 100, orderBy: Policy_orderBy, orderDirection: OrderDirection, where: Policy_filter): [Policy!]!
  assetDayData(skip: Int = 0, first: Int = 100, orderBy: AssetDayData_orderBy, orderDirection: OrderDirection, where: AssetDayData_filter): [AssetDayData!]!
}

type AssetDayData {
  id: ID!
  date: Int!
  asset: Asset!
  dailyVolume: BigDecimal!
  dailyTxns: BigInt!
}

input AssetDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyTxns: BigInt
  dailyTxns_not: BigInt
  dailyTxns_gt: BigInt
  dailyTxns_lt: BigInt
  dailyTxns_gte: BigInt
  dailyTxns_lte: BigInt
  dailyTxns_in: [BigInt!]
  dailyTxns_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AssetDayData_orderBy {
  id
  date
  asset
  dailyVolume
  dailyTxns
}

input Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  assetId: BigInt
  assetId_not: BigInt
  assetId_gt: BigInt
  assetId_lt: BigInt
  assetId_gte: BigInt
  assetId_lte: BigInt
  assetId_in: [BigInt!]
  assetId_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  addedAtTimestamp: BigInt
  addedAtTimestamp_not: BigInt
  addedAtTimestamp_gt: BigInt
  addedAtTimestamp_lt: BigInt
  addedAtTimestamp_gte: BigInt
  addedAtTimestamp_lte: BigInt
  addedAtTimestamp_in: [BigInt!]
  addedAtTimestamp_not_in: [BigInt!]
  addedAtBlockNumber: BigInt
  addedAtBlockNumber_not: BigInt
  addedAtBlockNumber_gt: BigInt
  addedAtBlockNumber_lt: BigInt
  addedAtBlockNumber_gte: BigInt
  addedAtBlockNumber_lte: BigInt
  addedAtBlockNumber_in: [BigInt!]
  addedAtBlockNumber_not_in: [BigInt!]
  policies_: Policy_filter
  assetDayData_: AssetDayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Asset_orderBy {
  id
  assetId
  symbol
  volume
  txCount
  addedAtTimestamp
  addedAtBlockNumber
  policies
  assetDayData
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Deposit {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  to: User!
  liquidityTokens: BigDecimal!
  caller: User!
  assets: BigDecimal!
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  liquidityTokens: BigDecimal
  liquidityTokens_not: BigDecimal
  liquidityTokens_gt: BigDecimal
  liquidityTokens_lt: BigDecimal
  liquidityTokens_gte: BigDecimal
  liquidityTokens_lte: BigDecimal
  liquidityTokens_in: [BigDecimal!]
  liquidityTokens_not_in: [BigDecimal!]
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  assets: BigDecimal
  assets_not: BigDecimal
  assets_gt: BigDecimal
  assets_lt: BigDecimal
  assets_gte: BigDecimal
  assets_lte: BigDecimal
  assets_in: [BigDecimal!]
  assets_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Deposit_orderBy {
  id
  transaction
  timestamp
  to
  liquidityTokens
  caller
  assets
}

type LiquidityPosition {
  id: ID!
  user: User!
  shares: BigDecimal!
}

type LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: User!
  totalAssets: BigDecimal!
  availableAssets: BigDecimal!
  lockedAssets: BigDecimal!
  sharesTotalSupply: BigDecimal!
  shares: BigDecimal!
}

input LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  liquidityPosition_: LiquidityPosition_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  totalAssets: BigDecimal
  totalAssets_not: BigDecimal
  totalAssets_gt: BigDecimal
  totalAssets_lt: BigDecimal
  totalAssets_gte: BigDecimal
  totalAssets_lte: BigDecimal
  totalAssets_in: [BigDecimal!]
  totalAssets_not_in: [BigDecimal!]
  availableAssets: BigDecimal
  availableAssets_not: BigDecimal
  availableAssets_gt: BigDecimal
  availableAssets_lt: BigDecimal
  availableAssets_gte: BigDecimal
  availableAssets_lte: BigDecimal
  availableAssets_in: [BigDecimal!]
  availableAssets_not_in: [BigDecimal!]
  lockedAssets: BigDecimal
  lockedAssets_not: BigDecimal
  lockedAssets_gt: BigDecimal
  lockedAssets_lt: BigDecimal
  lockedAssets_gte: BigDecimal
  lockedAssets_lte: BigDecimal
  lockedAssets_in: [BigDecimal!]
  lockedAssets_not_in: [BigDecimal!]
  sharesTotalSupply: BigDecimal
  sharesTotalSupply_not: BigDecimal
  sharesTotalSupply_gt: BigDecimal
  sharesTotalSupply_lt: BigDecimal
  sharesTotalSupply_gte: BigDecimal
  sharesTotalSupply_lte: BigDecimal
  sharesTotalSupply_in: [BigDecimal!]
  sharesTotalSupply_not_in: [BigDecimal!]
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  totalAssets
  availableAssets
  lockedAssets
  sharesTotalSupply
  shares
}

input LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum LiquidityPosition_orderBy {
  id
  user
  shares
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Policy {
  id: ID!
  transaction: Transaction!
  asset: Asset!
  assetPrice: BigDecimal!
  insured: User!
  payOutAmount: BigDecimal!
  premium: BigDecimal!
  startTime: BigInt!
  endTime: BigInt!
  threshold: Int!
  utilized: Boolean!
}

input Policy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  assetPrice: BigDecimal
  assetPrice_not: BigDecimal
  assetPrice_gt: BigDecimal
  assetPrice_lt: BigDecimal
  assetPrice_gte: BigDecimal
  assetPrice_lte: BigDecimal
  assetPrice_in: [BigDecimal!]
  assetPrice_not_in: [BigDecimal!]
  insured: String
  insured_not: String
  insured_gt: String
  insured_lt: String
  insured_gte: String
  insured_lte: String
  insured_in: [String!]
  insured_not_in: [String!]
  insured_contains: String
  insured_contains_nocase: String
  insured_not_contains: String
  insured_not_contains_nocase: String
  insured_starts_with: String
  insured_starts_with_nocase: String
  insured_not_starts_with: String
  insured_not_starts_with_nocase: String
  insured_ends_with: String
  insured_ends_with_nocase: String
  insured_not_ends_with: String
  insured_not_ends_with_nocase: String
  insured_: User_filter
  payOutAmount: BigDecimal
  payOutAmount_not: BigDecimal
  payOutAmount_gt: BigDecimal
  payOutAmount_lt: BigDecimal
  payOutAmount_gte: BigDecimal
  payOutAmount_lte: BigDecimal
  payOutAmount_in: [BigDecimal!]
  payOutAmount_not_in: [BigDecimal!]
  premium: BigDecimal
  premium_not: BigDecimal
  premium_gt: BigDecimal
  premium_lt: BigDecimal
  premium_gte: BigDecimal
  premium_lte: BigDecimal
  premium_in: [BigDecimal!]
  premium_not_in: [BigDecimal!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  threshold: Int
  threshold_not: Int
  threshold_gt: Int
  threshold_lt: Int
  threshold_gte: Int
  threshold_lte: Int
  threshold_in: [Int!]
  threshold_not_in: [Int!]
  utilized: Boolean
  utilized_not: Boolean
  utilized_in: [Boolean!]
  utilized_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Policy_orderBy {
  id
  transaction
  asset
  assetPrice
  insured
  payOutAmount
  premium
  startTime
  endTime
  threshold
  utilized
}

type Pool {
  id: ID!
  totalVolume: BigDecimal!
  utilizationRate: BigDecimal!
  policyCount: BigInt!
  txCount: BigInt!
  totalAssets: BigDecimal!
  availableAssets: BigDecimal!
  lockedAssets: BigDecimal!
  sharesTotalSupply: BigDecimal!
  liquidityProviderCount: BigInt!
}

type PoolDayData {
  id: ID!
  date: Int!
  dailyVolume: BigDecimal!
  totalVolume: BigDecimal!
  protocolFee: BigDecimal!
  totalAssets: BigDecimal!
  availableAssets: BigDecimal!
  lockedAssets: BigDecimal!
  txCount: BigInt!
  sharesTotalSupply: BigDecimal!
}

input PoolDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  protocolFee: BigDecimal
  protocolFee_not: BigDecimal
  protocolFee_gt: BigDecimal
  protocolFee_lt: BigDecimal
  protocolFee_gte: BigDecimal
  protocolFee_lte: BigDecimal
  protocolFee_in: [BigDecimal!]
  protocolFee_not_in: [BigDecimal!]
  totalAssets: BigDecimal
  totalAssets_not: BigDecimal
  totalAssets_gt: BigDecimal
  totalAssets_lt: BigDecimal
  totalAssets_gte: BigDecimal
  totalAssets_lte: BigDecimal
  totalAssets_in: [BigDecimal!]
  totalAssets_not_in: [BigDecimal!]
  availableAssets: BigDecimal
  availableAssets_not: BigDecimal
  availableAssets_gt: BigDecimal
  availableAssets_lt: BigDecimal
  availableAssets_gte: BigDecimal
  availableAssets_lte: BigDecimal
  availableAssets_in: [BigDecimal!]
  availableAssets_not_in: [BigDecimal!]
  lockedAssets: BigDecimal
  lockedAssets_not: BigDecimal
  lockedAssets_gt: BigDecimal
  lockedAssets_lt: BigDecimal
  lockedAssets_gte: BigDecimal
  lockedAssets_lte: BigDecimal
  lockedAssets_in: [BigDecimal!]
  lockedAssets_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  sharesTotalSupply: BigDecimal
  sharesTotalSupply_not: BigDecimal
  sharesTotalSupply_gt: BigDecimal
  sharesTotalSupply_lt: BigDecimal
  sharesTotalSupply_gte: BigDecimal
  sharesTotalSupply_lte: BigDecimal
  sharesTotalSupply_in: [BigDecimal!]
  sharesTotalSupply_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum PoolDayData_orderBy {
  id
  date
  dailyVolume
  totalVolume
  protocolFee
  totalAssets
  availableAssets
  lockedAssets
  txCount
  sharesTotalSupply
}

type PoolHourData {
  id: ID!
  hourStartUnix: Int!
  totalAssets: BigDecimal!
  availableAssets: BigDecimal!
  lockedAssets: BigDecimal!
  sharesTotalSupply: BigDecimal!
  hourlyVolume: BigDecimal!
  hourlyTxns: BigInt!
}

input PoolHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hourStartUnix: Int
  hourStartUnix_not: Int
  hourStartUnix_gt: Int
  hourStartUnix_lt: Int
  hourStartUnix_gte: Int
  hourStartUnix_lte: Int
  hourStartUnix_in: [Int!]
  hourStartUnix_not_in: [Int!]
  totalAssets: BigDecimal
  totalAssets_not: BigDecimal
  totalAssets_gt: BigDecimal
  totalAssets_lt: BigDecimal
  totalAssets_gte: BigDecimal
  totalAssets_lte: BigDecimal
  totalAssets_in: [BigDecimal!]
  totalAssets_not_in: [BigDecimal!]
  availableAssets: BigDecimal
  availableAssets_not: BigDecimal
  availableAssets_gt: BigDecimal
  availableAssets_lt: BigDecimal
  availableAssets_gte: BigDecimal
  availableAssets_lte: BigDecimal
  availableAssets_in: [BigDecimal!]
  availableAssets_not_in: [BigDecimal!]
  lockedAssets: BigDecimal
  lockedAssets_not: BigDecimal
  lockedAssets_gt: BigDecimal
  lockedAssets_lt: BigDecimal
  lockedAssets_gte: BigDecimal
  lockedAssets_lte: BigDecimal
  lockedAssets_in: [BigDecimal!]
  lockedAssets_not_in: [BigDecimal!]
  sharesTotalSupply: BigDecimal
  sharesTotalSupply_not: BigDecimal
  sharesTotalSupply_gt: BigDecimal
  sharesTotalSupply_lt: BigDecimal
  sharesTotalSupply_gte: BigDecimal
  sharesTotalSupply_lte: BigDecimal
  sharesTotalSupply_in: [BigDecimal!]
  sharesTotalSupply_not_in: [BigDecimal!]
  hourlyVolume: BigDecimal
  hourlyVolume_not: BigDecimal
  hourlyVolume_gt: BigDecimal
  hourlyVolume_lt: BigDecimal
  hourlyVolume_gte: BigDecimal
  hourlyVolume_lte: BigDecimal
  hourlyVolume_in: [BigDecimal!]
  hourlyVolume_not_in: [BigDecimal!]
  hourlyTxns: BigInt
  hourlyTxns_not: BigInt
  hourlyTxns_gt: BigInt
  hourlyTxns_lt: BigInt
  hourlyTxns_gte: BigInt
  hourlyTxns_lte: BigInt
  hourlyTxns_in: [BigInt!]
  hourlyTxns_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum PoolHourData_orderBy {
  id
  hourStartUnix
  totalAssets
  availableAssets
  lockedAssets
  sharesTotalSupply
  hourlyVolume
  hourlyTxns
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  utilizationRate: BigDecimal
  utilizationRate_not: BigDecimal
  utilizationRate_gt: BigDecimal
  utilizationRate_lt: BigDecimal
  utilizationRate_gte: BigDecimal
  utilizationRate_lte: BigDecimal
  utilizationRate_in: [BigDecimal!]
  utilizationRate_not_in: [BigDecimal!]
  policyCount: BigInt
  policyCount_not: BigInt
  policyCount_gt: BigInt
  policyCount_lt: BigInt
  policyCount_gte: BigInt
  policyCount_lte: BigInt
  policyCount_in: [BigInt!]
  policyCount_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalAssets: BigDecimal
  totalAssets_not: BigDecimal
  totalAssets_gt: BigDecimal
  totalAssets_lt: BigDecimal
  totalAssets_gte: BigDecimal
  totalAssets_lte: BigDecimal
  totalAssets_in: [BigDecimal!]
  totalAssets_not_in: [BigDecimal!]
  availableAssets: BigDecimal
  availableAssets_not: BigDecimal
  availableAssets_gt: BigDecimal
  availableAssets_lt: BigDecimal
  availableAssets_gte: BigDecimal
  availableAssets_lte: BigDecimal
  availableAssets_in: [BigDecimal!]
  availableAssets_not_in: [BigDecimal!]
  lockedAssets: BigDecimal
  lockedAssets_not: BigDecimal
  lockedAssets_gt: BigDecimal
  lockedAssets_lt: BigDecimal
  lockedAssets_gte: BigDecimal
  lockedAssets_lte: BigDecimal
  lockedAssets_in: [BigDecimal!]
  lockedAssets_not_in: [BigDecimal!]
  sharesTotalSupply: BigDecimal
  sharesTotalSupply_not: BigDecimal
  sharesTotalSupply_gt: BigDecimal
  sharesTotalSupply_lt: BigDecimal
  sharesTotalSupply_gte: BigDecimal
  sharesTotalSupply_lte: BigDecimal
  sharesTotalSupply_in: [BigDecimal!]
  sharesTotalSupply_not_in: [BigDecimal!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Pool_orderBy {
  id
  totalVolume
  utilizationRate
  policyCount
  txCount
  totalAssets
  availableAssets
  lockedAssets
  sharesTotalSupply
  liquidityProviderCount
}

type Query {
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    skip: Int = 0
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    where: Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Asset!]!
  policy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Policy
  policies(
    skip: Int = 0
    first: Int = 100
    orderBy: Policy_orderBy
    orderDirection: OrderDirection
    where: Policy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Policy!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourData
  poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourData_orderBy
    orderDirection: OrderDirection
    where: PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourData!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  assetDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetDayData
  assetDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetDayData_orderBy
    orderDirection: OrderDirection
    where: AssetDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetDayData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    skip: Int = 0
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    where: Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Asset!]!
  policy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Policy
  policies(
    skip: Int = 0
    first: Int = 100
    orderBy: Policy_orderBy
    orderDirection: OrderDirection
    where: Policy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Policy!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourData
  poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourData_orderBy
    orderDirection: OrderDirection
    where: PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourData!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  assetDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetDayData
  assetDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetDayData_orderBy
    orderDirection: OrderDirection
    where: AssetDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetDayData!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  withdrawals(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  policies(skip: Int = 0, first: Int = 100, orderBy: Policy_orderBy, orderDirection: OrderDirection, where: Policy_filter): [Policy!]!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  deposits: [String!]
  deposits_not: [String!]
  deposits_contains: [String!]
  deposits_contains_nocase: [String!]
  deposits_not_contains: [String!]
  deposits_not_contains_nocase: [String!]
  deposits_: Deposit_filter
  withdrawals: [String!]
  withdrawals_not: [String!]
  withdrawals_contains: [String!]
  withdrawals_contains_nocase: [String!]
  withdrawals_not_contains: [String!]
  withdrawals_not_contains_nocase: [String!]
  withdrawals_: Withdraw_filter
  policies: [String!]
  policies_not: [String!]
  policies_contains: [String!]
  policies_contains_nocase: [String!]
  policies_not_contains: [String!]
  policies_not_contains_nocase: [String!]
  policies_: Policy_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Transaction_orderBy {
  id
  blockNumber
  timestamp
  deposits
  withdrawals
  policies
}

type User {
  id: ID!
  policyCount: BigInt!
  premiumPaid: BigDecimal!
  policies(skip: Int = 0, first: Int = 100, orderBy: Policy_orderBy, orderDirection: OrderDirection, where: Policy_filter): [Policy!]!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  policyCount: BigInt
  policyCount_not: BigInt
  policyCount_gt: BigInt
  policyCount_lt: BigInt
  policyCount_gte: BigInt
  policyCount_lte: BigInt
  policyCount_in: [BigInt!]
  policyCount_not_in: [BigInt!]
  premiumPaid: BigDecimal
  premiumPaid_not: BigDecimal
  premiumPaid_gt: BigDecimal
  premiumPaid_lt: BigDecimal
  premiumPaid_gte: BigDecimal
  premiumPaid_lte: BigDecimal
  premiumPaid_in: [BigDecimal!]
  premiumPaid_not_in: [BigDecimal!]
  policies_: Policy_filter
  liquidityPositions_: LiquidityPosition_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum User_orderBy {
  id
  policyCount
  premiumPaid
  policies
  liquidityPositions
}

type Withdraw {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  to: User!
  liquidityTokens: BigDecimal!
  owner: User!
  caller: User!
  assets: BigDecimal!
}

input Withdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  liquidityTokens: BigDecimal
  liquidityTokens_not: BigDecimal
  liquidityTokens_gt: BigDecimal
  liquidityTokens_lt: BigDecimal
  liquidityTokens_gte: BigDecimal
  liquidityTokens_lte: BigDecimal
  liquidityTokens_in: [BigDecimal!]
  liquidityTokens_not_in: [BigDecimal!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: User_filter
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  assets: BigDecimal
  assets_not: BigDecimal
  assets_gt: BigDecimal
  assets_lt: BigDecimal
  assets_gte: BigDecimal
  assets_lte: BigDecimal
  assets_in: [BigDecimal!]
  assets_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Withdraw_orderBy {
  id
  transaction
  timestamp
  to
  liquidityTokens
  owner
  caller
  assets
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}